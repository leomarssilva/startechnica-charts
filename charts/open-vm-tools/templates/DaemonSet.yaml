{{- $globalSecretName := printf "%s" (tpl (include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecret "context" $)) $) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: open-vm-tools
    {{- if .Values.commonLabels }}
      {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: open-vm-tools
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: open-vm-tools
        {{- if .Values.podLabels }}
          {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: open-vm-tools
          image: {{ template "open-vm-tools.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: CLOUD_AGENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $globalSecretName }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.auth.existingSecret "key" "cloud-agent-password") }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/vmware-tools/tools.conf
              subPath: tools.conf
            - name: adjtime
              mountPath: /etc/adjtime
              readOnly: true
            - name: localtime
              mountPath: /etc/localtime
            - name: sysroot
              mountPath: /sysroot
              readOnly: true
            - name: nsswitch-conf
              mountPath: /etc/nsswitch.conf
            - name: var-lib-sss-pipes
              mountPath: /var/lib/sss/pipes
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      hostIPC: {{ .Values.hostIPC }}
      hostNetwork: {{ .Values.hostNetwork }}
      hostPID: {{ .Values.hostPID }}
      {{- include "open-vm-tools.imagePullSecrets" . | nindent 6 }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "open-vm-tools.serviceAccountName" . }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .) }}
        - name: adjtime
          hostPath:
            path: /etc/adjtime
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: sysroot
          hostPath:
            path: /sysroot
        - name: nsswitch-conf
          hostPath:
            path: /etc/nsswitch.conf
            type: FileOrCreate
        - name: var-lib-sss-pipes
          hostPath:
            path: /var/lib/sss/pipes
            type: DirectoryOrCreate
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.updateStrategy.type) }}
    rollingUpdate: null
    {{- else }}
    rollingUpdate:
      maxUnavailable: 1
    {{- end }}

